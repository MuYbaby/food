# JDBC Properties for MySQL Connection

# 1. JDBC Driver Class Name:
#    This specifies the fully qualified name of the MySQL Connector/J driver class.
#    For MySQL Connector/J 8.0 and later (and as you indicated), use:
jdbc.driverClassName=com.mysql.cj.jdbc.Driver

# 2. JDBC Connection URL:
#    This is the URL that JDBC will use to connect to your MySQL database.
#    It follows the format: jdbc:mysql://<host>:<port>/<database>?<options>
#    Replace placeholders with your actual values.

# Option 1: Using placeholders for host, port, and database in the URL (Recommended)
jdbc.url=jdbc:mysql://localhost:3306/food?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8

# Option 2:  You can also hardcode specific values in the URL if preferred
# jdbc.url=jdbc:mysql://your_mysql_host:3306/your_database_name?serverTimezone=UTC

# **Important Note about 'serverTimezone=UTC':**
#    It's highly recommended to include 'serverTimezone=UTC' (or another appropriate timezone)
#    in your connection URL, especially with newer MySQL and Connector/J versions.
#    This helps prevent timezone-related issues when working with date and time data between
#    your Java application and the MySQL server. Adjust 'UTC' to your desired timezone if needed.
#    Refer to the MySQL documentation for valid timezone options.


# 3. Database Username:
#    The username used to authenticate with your MySQL database.
#    Replace 'your_user' with your actual MySQL username.
jdbc.username=root

# 4. Database Password:
#    The password for the specified MySQL username.
#    Replace 'your_password' with your actual MySQL password.
jdbc.password=123456


# ------------------------------------------------------------------
# Optional Properties (Less common to put in properties file for basic setup,
#                     but can be useful in certain scenarios or for more config)
# ------------------------------------------------------------------

# You can also break down the URL components into separate properties if you prefer.
# This is less common in simple jdbc.properties but can be useful in some frameworks or
# configurations where you might want to manage these parts separately.

# Optional: Database Host (If you prefer to define it separately)
# jdbc.host=localhost

# Optional: Database Port (If you prefer to define it separately)
# jdbc.port=3306

# Optional: Database Name (If you prefer to define it separately)
# jdbc.database=your_database

# Optional: Server Timezone (If you want to explicitly set it as a separate property)
# jdbc.serverTimezone=UTC


# ------------------------------------------------------------------
#  Additional Notes and Customization:
# ------------------------------------------------------------------

# 1.  File Location:
#     Typically, you place this 'jdbc.properties' file in your project's classpath
#     (e.g., in the 'src/main/resources' folder in a Maven or Gradle project).
#     This allows your Java application to easily load these properties using
#     resource loading mechanisms.

# 2.  Placeholders:
#     Remember to replace 'localhost', '3306', 'your_database', 'your_user', and 'your_password'
#     with your actual MySQL server details.

# 3.  Security:
#     Storing passwords directly in a properties file is generally NOT recommended for production
#     environments due to security concerns.  Consider more secure methods for managing database
#     credentials in production (e.g., environment variables, dedicated secret management systems,
#     JNDI lookups, etc.). However, for development or simple applications, properties files are often used.

# 4.  Character Encoding (Optional - if you need to specify a specific encoding):
#     You can add character encoding options to the JDBC URL if needed:
#     e.g.,  jdbc.url=jdbc:mysql://...your_database?serverTimezone=UTC&characterEncoding=UTF-8

# 5.  Other MySQL Connection Properties:
#     MySQL Connector/J supports many other connection properties that you can add to the JDBC URL
#     or set as separate properties if your JDBC library allows it. Refer to the MySQL Connector/J
#     documentation for a comprehensive list of available properties.


# After setting up this file, you would typically load it in your Java code and
# use the properties to establish a JDBC connection.